"""
Router para b√∫squeda de productos por imagen
Usa Hugging Face para an√°lisis de im√°genes
"""
from fastapi import APIRouter, File, UploadFile, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List, Dict, Any

from app.db import get_db
from app import models
from app.services.huggingface_image_service import huggingface_image_service
from app.services.ai_service import ai_service

router = APIRouter(prefix="/products/search", tags=["Product Search"])
image_search_router = APIRouter(prefix="/image-search", tags=["Image Search"])


@router.post("/by-image")
async def search_products_by_image(
    file: UploadFile = File(...),
    db: Session = Depends(get_db)
):
    """Buscar productos similares usando una imagen"""
    try:
        # Leer imagen
        image_data = await file.read()
        
        # Analizar imagen con Hugging Face
        print(f"Analizando imagen: {file.filename}")
        analysis = huggingface_image_service.analyze_image(image_data)
        
        if not analysis["success"]:
            raise HTTPException(status_code=400, detail="Error analizando la imagen")
        
        # Obtener descripci√≥n de la imagen
        image_description = analysis["description"]
        print(f"Descripcion generada: {image_description}")
        
        # Obtener todos los productos
        products = db.query(models.Product).filter(models.Product.active == True).all()
        
        # Buscar productos similares usando descripci√≥n
        similar_products = []
        
        # Usar embeddings si est√°n disponibles
        if analysis["embedding"]:
            # Por ahora, usar b√∫squeda por descripci√≥n de texto
            # En el futuro, se pueden guardar embeddings de productos
            pass
        
        # B√∫squeda por similitud de texto usando RAG
        search_query = f"Buscar productos similares a: {image_description}"
        
        # Usar IA para recomendar productos basados en la descripci√≥n
        products_list = "\n".join([f"- ID:{p.id} | {p.title} | {p.description}" for p in products])
        
        ai_response = await ai_service.generate_response(
            prompt=f"""TAREA: Analizar imagen y recomendar productos similares.

DESCRIPCI√ìN DE LA IMAGEN: "{image_description}"

PRODUCTOS DISPONIBLES:
{products_list}

INSTRUCCIONES:
1. Identifica qu√© tipo de producto se ve en la imagen (camisa, pantal√≥n, zapatos, etc.)
2. Busca en la lista SOLO productos del mismo tipo o muy similares
3. Si NO HAY productos similares, responde "NO_MATCH"
4. Si S√ç HAY productos similares, responde SOLO los IDs separados por comas
5. M√°ximo 3 productos m√°s relevantes

FORMATO DE RESPUESTA: 
- Si hay match: "1,3,5" (solo IDs)
- Si no hay match: "NO_MATCH"

RESPUESTA:"""
        )
        
        # Filtrar productos mencionados por la IA
        recommended_products = []
        
        # Obtener texto de respuesta (manejar diferentes tipos de respuesta)
        ai_text = ""
        if hasattr(ai_response, 'response'):
            ai_text = ai_response.response
        elif hasattr(ai_response, 'text'):
            ai_text = ai_response.text
        elif isinstance(ai_response, dict):
            ai_text = ai_response.get('response', ai_response.get('text', ''))
        elif isinstance(ai_response, str):
            ai_text = ai_response
        
        print(f"Respuesta de IA: {ai_text}")
        
        # Parsear IDs recomendados por la IA
        if "NO_MATCH" not in ai_text:
            # Extraer IDs de la respuesta
            import re
            ids_found = re.findall(r'\b\d+\b', ai_text)
            
            if ids_found:
                # Convertir a enteros
                product_ids = [int(id_str) for id_str in ids_found[:3]]  # M√°ximo 3
                
                # Obtener productos por ID
                for pid in product_ids:
                    product = db.get(models.Product, pid)
                    if product and product.active:
                        recommended_products.append({
                            "id": product.id,
                            "title": product.title,
                            "description": product.description,
                            "price": float(product.price),
                            "image_url": product.image_url,
                            "similarity_score": 0.9
                        })
        
        # Si no encontr√≥ productos por ID, buscar por coincidencia de palabras clave
        if not recommended_products:
            # Mapeo de categor√≠as de ropa en ingl√©s a espa√±ol
            clothing_types = {
                "jeans": ["pantalon", "jean", "pants"],
                "pants": ["pantalon", "pants"],
                "shirt": ["camisa", "playera", "polo"],
                "shoes": ["zapato", "zapatos", "calzado", "botas"],
                "boots": ["bota", "botas"],
                "dress": ["vestido"],
                "skirt": ["falda"],
                "jacket": ["chaqueta", "chamarra"],
                "hat": ["gorro", "sombrero"],
                "t-shirt": ["camiseta", "playera"]
            }
            
            # Identificar tipo de producto en la imagen
            desc_lower = image_description.lower()
            product_type_found = None
            
            for eng_type, spanish_equivalents in clothing_types.items():
                if eng_type in desc_lower:
                    product_type_found = spanish_equivalents
                    break
            
            # Buscar productos del mismo tipo
            for product in products:
                product_text = f"{product.title} {product.description}".lower()
                
                score = 0
                
                # Si encontramos el tipo, dar prioridad a productos del mismo tipo
                if product_type_found:
                    for type_word in product_type_found:
                        if type_word in product_text:
                            score += 0.8  # Alto score por tipo coincidente
                
                # Buscar coincidencias de palabras clave
                keywords = [w for w in desc_lower.split() if len(w) > 3]
                for keyword in keywords:
                    if keyword in product_text:
                        score += 0.2
                
                # Solo agregar si hay match significativo
                if score >= 0.5:
                    recommended_products.append({
                        "id": product.id,
                        "title": product.title,
                        "description": product.description,
                        "price": float(product.price),
                        "image_url": product.image_url,
                        "similarity_score": score
                    })
            
            # Ordenar por score descendente
            recommended_products.sort(key=lambda x: x["similarity_score"], reverse=True)
            recommended_products = recommended_products[:3]  # Solo top 3
        
        # Si a√∫n no hay productos, informar que no hay match
        if not recommended_products:
            ai_text = f"No encontr√© productos similares a '{image_description}' en nuestro cat√°logo actual. ¬øTe gustar√≠a ver todos nuestros productos disponibles?"
        
        # Generar mensaje personalizado
        if recommended_products:
            product_names = ", ".join([p["title"] for p in recommended_products[:3]])
            final_message = f"üì∏ He analizado la imagen: **{image_description}**\n\n‚ú® Encontr√© {len(recommended_products)} producto(s) similar(es): {product_names}"
        else:
            final_message = f"üì∏ Imagen analizada: **{image_description}**\n\nüòî No encontr√© productos exactamente iguales en nuestro cat√°logo, pero puedo ayudarte a buscar algo similar. ¬øQu√© tipo de producto buscas?"
        
        return {
            "image_analysis": {
                "description": image_description,
                "features": analysis["features"]
            },
            "similar_products": recommended_products,
            "ai_recommendation": final_message,
            "total_found": len(recommended_products)
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"Error en b√∫squeda por imagen: {e}")
        raise HTTPException(status_code=500, detail=f"Error interno: {str(e)}")


@router.post("/describe-image")
async def describe_product_image(
    file: UploadFile = File(...),
    db: Session = Depends(get_db)
):
    """Obtener descripci√≥n detallada de un producto en una imagen"""
    try:
        # Leer imagen
        image_data = await file.read()
        
        # Generar descripci√≥n detallada
        description = huggingface_image_service.describe_product_from_image(image_data)
        
        return {
            "description": description,
            "filename": file.filename,
            "success": True
        }
        
    except Exception as e:
        print(f"Error describiendo imagen: {e}")
        raise HTTPException(status_code=500, detail=f"Error interno: {str(e)}")


# ==================== ENDPOINTS PARA EL FRONTEND ====================

@image_search_router.post("/search")
async def search_by_image_frontend(
    file: UploadFile = File(...),
    db: Session = Depends(get_db)
):
    """Endpoint para el frontend - buscar productos por imagen"""
    try:
        # Leer imagen
        image_data = await file.read()
        
        # Analizar imagen con Hugging Face
        print(f"Analizando imagen desde frontend: {file.filename}")
        analysis = huggingface_image_service.analyze_image(image_data)
        
        # Si el an√°lisis falla, usar an√°lisis b√°sico
        if not analysis.get("success", False):
            print("‚ö†Ô∏è An√°lisis fall√≥, usando an√°lisis b√°sico")
            analysis = {
                "success": True,
                "description": "Imagen procesada correctamente",
                "features": ["imagen", "producto"],
                "embedding": []
            }
        
        # Obtener descripci√≥n de la imagen
        image_description = analysis["description"]
        print(f"Descripcion generada: {image_description}")
        
        # Obtener todos los productos
        products = db.query(models.Product).filter(models.Product.active == True).all()
        
        # Buscar productos similares usando descripci√≥n
        similar_products = []
        
        # B√∫squeda por similitud de texto usando RAG
        search_query = f"Buscar productos similares a: {image_description}"
        
        # Usar IA para recomendar productos basados en la descripci√≥n
        products_list = "\n".join([f"- ID:{p.id} | {p.title} | {p.description}" for p in products])
        
        ai_response = await ai_service.generate_response(
            prompt=f"""TAREA: Analizar imagen y recomendar productos similares.

DESCRIPCI√ìN DE LA IMAGEN: "{image_description}"

PRODUCTOS DISPONIBLES:
{products_list}

INSTRUCCIONES:
1. Identifica qu√© tipo de producto se ve en la imagen (camisa, pantal√≥n, zapatos, etc.)
2. Busca en la lista SOLO productos del mismo tipo o muy similares
3. Si NO HAY productos similares, responde "NO_MATCH"
4. Si S√ç HAY productos similares, responde SOLO los IDs separados por comas
5. M√°ximo 3 productos m√°s relevantes

FORMATO DE RESPUESTA: 
- Si hay match: "1,3,5" (solo IDs)
- Si no hay match: "NO_MATCH"

RESPUESTA:"""
        )
        
        # Filtrar productos mencionados por la IA
        recommended_products = []
        
        # Obtener texto de respuesta (manejar diferentes tipos de respuesta)
        ai_text = ""
        if hasattr(ai_response, 'response'):
            ai_text = ai_response.response
        elif hasattr(ai_response, 'text'):
            ai_text = ai_response.text
        elif isinstance(ai_response, dict):
            ai_text = ai_response.get('response', ai_response.get('text', ''))
        elif isinstance(ai_response, str):
            ai_text = ai_response
        
        print(f"Respuesta de IA: {ai_text}")
        
        # Parsear IDs recomendados por la IA
        if "NO_MATCH" not in ai_text:
            # Extraer IDs de la respuesta
            import re
            ids_found = re.findall(r'\b\d+\b', ai_text)
            
            if ids_found:
                # Convertir a enteros
                product_ids = [int(id_str) for id_str in ids_found[:3]]  # M√°ximo 3
                
                # Obtener productos por ID
                for pid in product_ids:
                    product = db.get(models.Product, pid)
                    if product and product.active:
                        recommended_products.append({
                            "id": product.id,
                            "title": product.title,
                            "description": product.description,
                            "price": float(product.price),
                            "image_url": product.image_url,
                            "similarity_score": 0.9
                        })
        
        # Si no encontr√≥ productos por ID, buscar por coincidencia de palabras clave
        if not recommended_products:
            # Mapeo de categor√≠as de ropa en ingl√©s a espa√±ol
            clothing_types = {
                "jeans": ["pantalon", "jean", "pants"],
                "pants": ["pantalon", "pants"],
                "shirt": ["camisa", "playera", "polo"],
                "shoes": ["zapato", "zapatos", "calzado", "botas"],
                "boots": ["bota", "botas"],
                "dress": ["vestido"],
                "skirt": ["falda"],
                "jacket": ["chaqueta", "chamarra"],
                "hat": ["gorro", "sombrero"],
                "t-shirt": ["camiseta", "playera"]
            }
            
            # Identificar tipo de producto en la imagen
            desc_lower = image_description.lower()
            product_type_found = None
            
            for eng_type, spanish_equivalents in clothing_types.items():
                if eng_type in desc_lower:
                    product_type_found = spanish_equivalents
                    break
            
            # Buscar productos del mismo tipo
            for product in products:
                product_text = f"{product.title} {product.description}".lower()
                
                score = 0
                
                # Si encontramos el tipo, dar prioridad a productos del mismo tipo
                if product_type_found:
                    for type_word in product_type_found:
                        if type_word in product_text:
                            score += 0.8  # Alto score por tipo coincidente
                
                # Buscar coincidencias de palabras clave
                keywords = [w for w in desc_lower.split() if len(w) > 3]
                for keyword in keywords:
                    if keyword in product_text:
                        score += 0.2
                
                # Solo agregar si hay match significativo
                if score >= 0.5:
                    recommended_products.append({
                        "id": product.id,
                        "title": product.title,
                        "description": product.description,
                        "price": float(product.price),
                        "image_url": product.image_url,
                        "similarity_score": score
                    })
            
            # Ordenar por score descendente
            recommended_products.sort(key=lambda x: x["similarity_score"], reverse=True)
            recommended_products = recommended_products[:3]  # Solo top 3
        
        # Generar mensaje personalizado
        if recommended_products:
            product_names = ", ".join([p["title"] for p in recommended_products[:3]])
            final_message = f"üì∏ He analizado la imagen: **{image_description}**\n\n‚ú® Encontr√© {len(recommended_products)} producto(s) similar(es): {product_names}"
        else:
            final_message = f"üì∏ Imagen analizada: **{image_description}**\n\nüòî No encontr√© productos exactamente iguales en nuestro cat√°logo, pero puedo ayudarte a buscar algo similar. ¬øQu√© tipo de producto buscas?"
        
        return {
            "success": True,
            "image_analysis": {
                "description": image_description,
                "features": analysis["features"]
            },
            "similar_products": recommended_products,
            "ai_recommendation": final_message,
            "total_found": len(recommended_products)
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"Error en b√∫squeda por imagen desde frontend: {e}")
        raise HTTPException(status_code=500, detail=f"Error interno: {str(e)}")

